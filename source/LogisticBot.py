import telebot
from telebot import types
import time
import os
import google.generativeai as genai
import requests
import json # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ API

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
BOT_TOKEN = "TOKEN" 
GEMINI_API_KEY = "API_KEY" 
YANDEX_API_KEY = "API_KEY" 

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º Google AI SDK
gemini_configured = False
if not GEMINI_API_KEY or GEMINI_API_KEY == "YOUR_GEMINI_API_KEY":
    print("!!! –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É–∫–∞–∑–∞–Ω Google AI (Gemini) API –∫–ª—é—á...")
else:
    try:
        genai.configure(api_key=GEMINI_API_KEY)
        print("Google AI (Gemini) SDK —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω.")
        gemini_configured = True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Google AI (Gemini) SDK: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ Yandex
yandex_configured = False
if not YANDEX_API_KEY or YANDEX_API_KEY == "YOUR_YANDEX_ROUTING_API_KEY":
    print("!!! –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É–∫–∞–∑–∞–Ω Yandex API –∫–ª—é—á. –†–∞—Å—á–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ –ø–ª–∞—Ç–Ω—ã—Ö –¥–æ—Ä–æ–≥ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
else:
    print("Yandex API –∫–ª—é—á —É–∫–∞–∑–∞–Ω.")
    yandex_configured = True


bot = telebot.TeleBot(BOT_TOKEN)

# --- –£–î–ê–õ–ï–ù–ò–ï WEBHOOK ---
print("–ü—ã—Ç–∞—é—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫...")
try:
    webhook_removed = bot.remove_webhook()
    if webhook_removed: print("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else: print("–í–µ–±—Ö—É–∫ –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω.")
    time.sleep(0.5)
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
user_states = {}
user_data = {}
def set_user_state(chat_id, state): user_states[chat_id] = state; print(f"State for {chat_id} set: {state}")
def get_user_state(chat_id): return user_states.get(chat_id)
def clear_user_state(chat_id):
    user_states.pop(chat_id, None); user_data.pop(chat_id, None)
    print(f"State/data for {chat_id} cleared.")

# --- –¢–µ–∫—Å—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π ---
texts = {
    "welcome": "–ü—Ä–∏–≤–µ—Ç. –Ø –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã, –ª–∏–±–æ —Å –ø–æ–º–æ—â—å—é –ò–ò –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π! –ß—Ç–æ –≤—ã–±–µ—Ä–µ—à—å?",
    "questions_menu": "–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
    "logistics_help_start": "–ß—Ç–æ–±—ã –ø–æ–º–æ—á—å —Å –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π, –º–Ω–µ –Ω—É–∂–Ω—ã –¥–≤–µ —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ.",
    "ask_ai_prompt": "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è AI (Gemini):",
    "ask_ai_processing": "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é AI (Gemini)...",
    "ask_ai_error": "üòï –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI (Gemini). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    "ask_location_1": "üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É (–Ω–∞—á–∞–ª—å–Ω—É—é), –∏—Å–ø–æ–ª—å–∑—É—è –≤–ª–æ–∂–µ–Ω–∏–µ '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è'.",
    "ask_location_2": "üìç –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä—É—é —Ç–æ—á–∫—É (–∫–æ–Ω–µ—á–Ω—É—é), –∏—Å–ø–æ–ª—å–∑—É—è –≤–ª–æ–∂–µ–Ω–∏–µ '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è'.",
    "logistics_processing": "‚è≥ –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –æ—Ç –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ª–æ–≥–∏—Å—Ç–∏–∫—É —Å –ø–æ–º–æ—â—å—é AI (Gemini)... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
    "logistics_error": "üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫—É —Å –ø–æ–º–æ—â—å—é AI. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
    "yandex_routing_error": "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ä—à—Ä—É—Ç–µ –æ—Ç –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç. –†–∞—Å—á–µ—Ç –±—É–¥–µ—Ç –º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–º.",
    "location_unexpected": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–º–æ—â—å —Å –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ—Ç–æ—á–∫—É —á–µ—Ä–µ–∑ –≤–ª–æ–∂–µ–Ω–∏—è.",
    "ai_unexpected": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°–ø—Ä–æ—Å–∏—Ç—å —É AI', —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
    "advantages": "–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è AI –∏ IoT –≤ –ª–æ–≥–∏—Å—Ç–∏–∫—É?\nAI –∏ IoT –ø–æ–º–æ–≥–∞—é—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã, —Å–Ω–∏–∂–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã, —É–ª—É—á—à–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø–∞—Å–∞–º–∏, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º –ø–æ—Å—Ç–∞–≤–∫–∞–º.",
    "integration_steps": "–ö–∞–∫–∏–µ —à–∞–≥–∏ –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI –∏ IoT –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã?\n–î–ª—è —É—Å–ø–µ—à–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ AI –∏ IoT –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –æ–±—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª –∏ –Ω–∞—á–∞—Ç—å —Å –ø–∏–ª–æ—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. –í–∞–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ–±–µ—Å–ø–µ—á–∏—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏.",
    "supply_chain": "–ö–∞–∫ AI –∏ IoT –ø–æ–º–æ–≥–∞—é—Ç –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ø–æ—á–∫–∞–º–∏ –ø–æ—Å—Ç–∞–≤–æ–∫?\nAI –∏ IoT –ø–æ–∑–≤–æ–ª—è—é—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–∫—É–ø–æ–∫ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–∞–º–∏ –∏ –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–ª–∏—à–∫–æ–≤.",
    "roi": "–ö–∞–∫–æ–≤–∞ —Ç–∏–ø–∏—á–Ω–∞—è –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π (ROI) –ø—Ä–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–∏ AI –∏ IoT –≤ –ª–æ–≥–∏—Å—Ç–∏–∫–µ?\nROI –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º, –±–ª–∞–≥–æ–¥–∞—Ä—è —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤, —Å–æ–∫—Ä–∞—â–µ–Ω–∏—é —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞, —Å–Ω–∏–∂–µ–Ω–∏—é –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–±–æ–µ–≤ –∏ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é —Ä–µ—Å—É—Ä—Å–æ–≤. –í—Ä–µ–º—è –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –º–∞—Å—à—Ç–∞–±–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è."
}

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
def create_main_menu_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1); btn_questions = types.InlineKeyboardButton("–ü–æ–º–æ—â—å —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏", callback_data="show_questions"); btn_logistics = types.InlineKeyboardButton("–ü–æ–º–æ—â—å —Å –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π", callback_data="start_logistics"); keyboard.add(btn_questions, btn_logistics); return keyboard
def create_questions_menu_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=2); btn_advantages = types.InlineKeyboardButton("–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ AI", callback_data="show_advantages"); btn_supply_chain = types.InlineKeyboardButton("AI –≤ —Ü–µ–ø–æ—á–∫–∞—Ö –ø–æ—Å—Ç–∞–≤–æ–∫", callback_data="show_supply_chain"); btn_integration = types.InlineKeyboardButton("–®–∞–≥–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", callback_data="show_integration_steps"); btn_roi = types.InlineKeyboardButton("–û–∫—É–ø–∞–µ–º–æ—Å—Ç—å", callback_data="show_roi"); btn_ask_ai = types.InlineKeyboardButton("ü§ñ –°–ø—Ä–æ—Å–∏—Ç—å —É AI", callback_data="ask_ai"); btn_back_main = types.InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_main"); keyboard.add(btn_advantages, btn_supply_chain, btn_integration, btn_roi); keyboard.add(btn_ask_ai); keyboard.add(btn_back_main); return keyboard
def create_cancel_keyboard(cancel_callback="back_to_main"):
    keyboard = types.InlineKeyboardMarkup(row_width=1); btn_cancel = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_callback); keyboard.add(btn_cancel); return keyboard
def create_back_to_questions_keyboard():
    keyboard = types.InlineKeyboardMarkup(row_width=1); btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="back_to_questions"); keyboard.add(btn_back); return keyboard
def create_back_to_main_menu_keyboard():
     keyboard = types.InlineKeyboardMarkup(row_width=1); btn_back = types.InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"); keyboard.add(btn_back); return keyboard

# --- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞ –æ—Ç Yandex Directions API ---
def get_yandex_route_info(start_lat, start_lon, end_lat, end_lon):
    if not yandex_configured:
        print("Yandex API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é –∑–∞–ø—Ä–æ—Å –º–∞—Ä—à—Ä—É—Ç–∞.")
        return None
    waypoints = f"{start_lon},{start_lat}|{end_lon},{end_lat}"
    api_url = "https://api.routing.yandex.net/v2/route"
    params = {"apikey": YANDEX_API_KEY, "waypoints": waypoints, "mode": "driving", "results": 1}
    print(f"–ó–∞–ø—Ä–æ—Å –∫ Yandex Directions API: waypoints={waypoints}")
    try:
        response = requests.get(api_url, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()
        routes = data.get("route", {}).get("legs", [])
        if not routes:
            print("–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ Yandex Directions API.")
            return None
        summary = routes[0].get("summary", {})
        distance_meters = summary.get("distance", {}).get("value")
        has_tolls = summary.get("flags", {}).get("tolls", False)
        if distance_meters is None:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ Yandex.")
            return None
        distance_km = round(distance_meters / 1000, 1)
        print(f"Yandex Route Info: Distance={distance_km} km, Has Tolls={has_tolls}")
        return {'distance_km': distance_km, 'has_tolls': has_tolls}
    except requests.exceptions.Timeout: print("–û—à–∏–±–∫–∞: –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Yandex Directions API"); return None
    except requests.exceptions.RequestException as e: print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Yandex Directions API: {e}"); return None
    except (json.JSONDecodeError, KeyError, IndexError, ValueError) as e: print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Yandex Directions API: {e}"); return None
    except Exception as e: print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –º–∞—Ä—à—Ä—É—Ç–∞ Yandex: {e}"); return None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@bot.message_handler(commands=['start'])
def handle_start(message):
    print(f"User {message.from_user.first_name} ({message.chat.id}) started the bot.")
    clear_user_state(message.chat.id); keyboard = create_main_menu_keyboard(); bot.send_message(message.chat.id, texts["welcome"], reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    chat_id = call.message.chat.id; message_id = call.message.message_id; user_name = call.from_user.first_name; callback_data = call.data
    print(f"User {user_name} ({chat_id}) pressed button: {callback_data}"); bot.answer_callback_query(call.id)
    try:
        if callback_data == "ask_ai":
            if not gemini_configured: bot.answer_callback_query(call.id, "–°–µ—Ä–≤–∏—Å AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True); return
            set_user_state(chat_id, 'awaiting_ai_question'); keyboard = create_cancel_keyboard("back_to_questions"); bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=texts["ask_ai_prompt"], reply_markup=keyboard)
        elif callback_data == "show_questions":
            clear_user_state(chat_id); keyboard = create_questions_menu_keyboard(); bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=texts["questions_menu"], reply_markup=keyboard)
        elif callback_data == "start_logistics":
            clear_user_state(chat_id); set_user_state(chat_id, 'awaiting_location_1'); user_data[chat_id] = {}; keyboard = create_cancel_keyboard("back_to_main"); bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=texts["ask_location_1"], reply_markup=keyboard)
        elif callback_data == "show_advantages": clear_user_state(chat_id); keyboard = create_back_to_questions_keyboard(); bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=texts["advantages"], reply_markup=keyboard)
        elif callback_data == "show_integration_steps": clear_user_state(chat_id); keyboard = create_back_to_questions_keyboard(); bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=texts["integration_steps"], reply_markup=keyboard)
        elif callback_data == "show_supply_chain": clear_user_state(chat_id); keyboard = create_back_to_questions_keyboard(); bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=texts["supply_chain"], reply_markup=keyboard)
        elif callback_data == "show_roi": clear_user_state(chat_id); keyboard = create_back_to_questions_keyboard(); bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=texts["roi"], reply_markup=keyboard)
        elif callback_data == "back_to_questions": clear_user_state(chat_id); keyboard = create_questions_menu_keyboard(); bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=texts["questions_menu"], reply_markup=keyboard)
        elif callback_data == "back_to_main":
            clear_user_state(chat_id); keyboard = create_main_menu_keyboard()
            try: bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=texts["welcome"], reply_markup=keyboard)
            except telebot.apihelper.ApiTelegramException as e:
                 if "message can't be edited" in str(e) or "message to edit not found" in str(e): bot.send_message(chat_id, texts["welcome"], reply_markup=keyboard)
                 else: print(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (edit): {e}"); bot.send_message(chat_id, texts["welcome"], reply_markup=keyboard)
    except telebot.apihelper.ApiTelegramException as e:
        print(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {callback_data}: {e}")
        err_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ Telegram API."
        if "message is not modified" in str(e): err_text="–í—ã —É–∂–µ –∑–¥–µ—Å—å."
        elif "message to edit not found" in str(e): err_text="–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ."
        elif "Too Many Requests" in str(e): err_text="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ."
        bot.answer_callback_query(call.id, text=err_text)
    except Exception as e:
        print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback {callback_data}: {e}"); bot.answer_callback_query(call.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")


@bot.message_handler(content_types=['location'])
def handle_location(message):
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    current_state = get_user_state(chat_id)
    location = message.location
    print(f"User {user_name} ({chat_id}) sent location: {location}. Current state: {current_state}")

    if current_state == 'awaiting_location_1':
        user_data[chat_id] = {'loc1': location}
        set_user_state(chat_id, 'awaiting_location_2')
        keyboard = create_cancel_keyboard("back_to_main")
        try:
             if message.reply_to_message: bot.delete_message(chat_id, message.reply_to_message.message_id)
        except Exception as del_err: print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {del_err}")
        bot.send_message(chat_id, texts["ask_location_2"], reply_markup=keyboard)

    elif current_state == 'awaiting_location_2':
        if chat_id in user_data and 'loc1' in user_data[chat_id]:
            loc1 = user_data[chat_id]['loc1']
            loc2 = location
            print(f"Received locations for {chat_id}: Loc1=({loc1.latitude},{loc1.longitude}), Loc2=({loc2.latitude},{loc2.longitude})")

            processing_msg = bot.send_message(chat_id, texts["logistics_processing"])
            yandex_route_info = None
            yandex_error_occurred = False

            if yandex_configured:
                yandex_route_info = get_yandex_route_info(loc1.latitude, loc1.longitude, loc2.latitude, loc2.longitude)
                if yandex_route_info is None: yandex_error_occurred = True

            if not gemini_configured:
                bot.edit_message_text(chat_id=chat_id, message_id=processing_msg.message_id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=create_back_to_main_menu_keyboard())
                clear_user_state(chat_id); return

            distance_text = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç)"
            tolls_text = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç)"
            tolls_clause_for_cost = "–í–æ–∑–º–æ–∂–Ω–æ, –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ –µ—Å—Ç—å –ø–ª–∞—Ç–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏, —É—á—Ç–∏ —ç—Ç–æ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ."
            distance_clause_for_prompt = "–û—Ü–µ–Ω–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ."
            if yandex_route_info:
                distance_km = yandex_route_info['distance_km']
                has_tolls = yandex_route_info['has_tolls']
                distance_text = f"–ø—Ä–∏–º–µ—Ä–Ω–æ {distance_km} –∫–º (—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –ø–æ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞–º)"
                tolls_text = "–≤–µ—Ä–æ—è—Ç–Ω–æ –≤–∫–ª—é—á–∞–µ—Ç" if has_tolls else "–≤–µ—Ä–æ—è—Ç–Ω–æ –ù–ï –≤–∫–ª—é—á–∞–µ—Ç"
                tolls_clause_for_cost = "–£—á—Ç–∏, —á—Ç–æ –º–∞—Ä—à—Ä—É—Ç " + tolls_text + " –ø–ª–∞—Ç–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏."
                distance_clause_for_prompt = f"–ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ {distance_km} –∫–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞."

            # --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢ –° –£–ö–ê–ó–ê–ù–ò–ï–ú –ù–ê HTML ---
            prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

            –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
            - –¢–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞): {loc1.latitude}, {loc1.longitude}
            - –¢–æ—á–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞): {loc2.latitude}, {loc2.longitude}
            - –ì—Ä—É–∑: 1 —Ç–æ–Ω–Ω–∞, —Ç–æ–≤–∞—Ä —É—Å—Ç–æ–π—á–∏–≤—ã–π –∫ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è–º (–Ω–µ —Ö—Ä—É–ø–∫–∏–π).
            - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏. –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –º–µ–Ω–µ–µ –≤–∞–∂–Ω–∞.
            - –†–ê–°–°–¢–û–Ø–ù–ò–ï –ü–û –ú–ê–†–®–†–£–¢–£: {distance_text}.
            - –ü–õ–ê–¢–ù–´–ï –î–û–†–û–ì–ò: –ú–∞—Ä—à—Ä—É—Ç {tolls_text} –ø–ª–∞—Ç–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏ (–ø–æ –¥–∞–Ω–Ω—ã–º –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç).

            –ó–∞–¥–∞—á–∏:
            1. –û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–π –≤–∏–¥ –Ω–∞–∑–µ–º–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (—Ñ—É—Ä–≥–æ–Ω, –ì–ê–ó–µ–ª—å, —Å—Ä–µ–¥–Ω–µ—Ç–æ–Ω–Ω–∞–∂–Ω—ã–π –≥—Ä—É–∑–æ–≤–∏–∫ –∏ —Ç.–ø.), —É—á–∏—Ç—ã–≤–∞—è –≤–µ—Å 1—Ç –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∏–∑–∫–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏.
            2. –û—Ü–µ–Ω–∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é –û–ë–©–£–Æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏ —ç—Ç–∏–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º. {distance_clause_for_prompt} {tolls_clause_for_cost} –¢–∞–∫–∂–µ —É—á—Ç–∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞–π–º–∞ –≤–æ–¥–∏—Ç–µ–ª—è (–∏–ª–∏ –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—é/–∞—Ä–µ–Ω–¥—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞). –£–∫–∞–∂–∏, —á—Ç–æ —ç—Ç–æ –û–¶–ï–ù–ö–ê.
            3. –û–ø–∏—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–∞—Ä—à—Ä—É—Ç –≤ –æ–±—â–∏—Ö —á–µ—Ä—Ç–∞—Ö (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∞—Å—Å—ã, –∫–ª—é—á–µ–≤—ã–µ –≥–æ—Ä–æ–¥–∞).
            4. –ü—Ä–µ–¥—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (<b> –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ, <i> –¥–ª—è –∫—É—Ä—Å–∏–≤–∞, <code> –¥–ª—è –∫–æ–¥–∞, <br> –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ). –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown. –ù–∞—á–Ω–∏ —Å –∫—Ä–∞—Ç–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞.

            –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (—Å HTML):
            <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –ª–æ–≥–∏—Å—Ç–∏–∫–µ:</b><br>
            <ul>
            <li><b>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:</b> [–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞]</li>
            <li><b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> [–°—É–º–º–∞] —Ä—É–±. (<i>–û–¶–ï–ù–ö–ê: –≤–∫–ª—é—á–∞–µ—Ç —Ç–æ–ø–ª–∏–≤–æ, –≤–æ–¥–∏—Ç–µ–ª—è/–∞—Ä–µ–Ω–¥—É, –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–ª–∞—Ç–Ω—ã–µ –¥–æ—Ä–æ–≥–∏</i>)</li>
            <li><b>–û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã –º–∞—Ä—à—Ä—É—Ç–∞:</b> [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞]</li>
            <li><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> [–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—è—Å–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å]</li>
            </ul>
            """

            final_response_text = ""
            try:
                model = genai.GenerativeModel('gemini-1.5-flash-latest')
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
                safety_settings=[
                    {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                    {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                    {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                    {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                ]
                response = model.generate_content(prompt, safety_settings=safety_settings)

                if response.parts:
                    ai_response = response.text
                    if yandex_error_occurred: final_response_text = texts["yandex_routing_error"] + "\n\n" + ai_response
                    else: final_response_text = ai_response
                else: # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ –ø—É—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                    block_reason = response.prompt_feedback.block_reason if response.prompt_feedback else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
                    final_response_text = texts["logistics_error"] + f"\n(–ü—Ä–∏—á–∏–Ω–∞: –û—Ç–≤–µ—Ç AI –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω [{block_reason}] –∏–ª–∏ –ø—É—Å—Ç)"
                    print(f"Gemini logistics response blocked/empty for chat {chat_id}. Reason: {block_reason}. Response: {response}")

            except Exception as e:
                print(f"Google AI (Gemini) API Error during logistics analysis: {e}")
                final_response_text = texts["logistics_error"]
                if yandex_error_occurred: final_response_text = texts["yandex_routing_error"] + "\n\n" + final_response_text

            # --- –û–¢–ü–†–ê–í–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê –° PARSE_MODE="HTML" –ò –û–ë–†–ê–ë–û–¢–ö–û–ô –û–®–ò–ë–ö–ò ---
            try:
                bot.edit_message_text(chat_id=chat_id, message_id=processing_msg.message_id,
                                      text=final_response_text,
                                      reply_markup=create_back_to_main_menu_keyboard(),
                                      parse_mode="HTML") # <--- –£–°–¢–ê–ù–û–í–õ–ï–ù HTML
            except telebot.apihelper.ApiTelegramException as e:
                if "can't parse entities" in str(e): # –ï—Å–ª–∏ –¥–∞–∂–µ HTML –Ω–µ —Å–ø–∞—Ä—Å–∏–ª—Å—è (–æ—á–µ–Ω—å —Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π)
                     print(f"!!! –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML –æ—Ç–≤–µ—Ç–∞ Gemini: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                     try:
                          bot.edit_message_text(chat_id=chat_id, message_id=processing_msg.message_id,
                                                text=final_response_text, # –¢–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç, –Ω–æ –±–µ–∑ parse_mode
                                                reply_markup=create_back_to_main_menu_keyboard(),
                                                parse_mode=None) # <--- –£–ë–†–ê–õ–ò PARSE_MODE
                     except Exception as fallback_e:
                          print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–∂–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {fallback_e}")
                          # –ú–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—à–∏–±–∫—É
                          bot.edit_message_text(chat_id=chat_id, message_id=processing_msg.message_id,
                                                text=texts["logistics_error"],
                                                reply_markup=create_back_to_main_menu_keyboard())
                else: # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ API Telegram –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
                     print(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–∏: {e}")
                     # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—à–∏–±–∫—É
                     bot.edit_message_text(chat_id=chat_id, message_id=processing_msg.message_id,
                                           text=texts["logistics_error"],
                                           reply_markup=create_back_to_main_menu_keyboard())

            clear_user_state(chat_id) # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏

        else: # –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–µ
            print(f"Error: State awaiting_location_2, but no loc1 found for chat {chat_id}")
            bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–µ –ø–æ—Ç–µ—Ä—è–Ω—ã...", reply_markup=create_main_menu_keyboard())
            clear_user_state(chat_id); keyboard = create_main_menu_keyboard(); bot.send_message(message.chat.id, texts["welcome"], reply_markup=keyboard)
    else: # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
        bot.send_message(chat_id, texts["location_unexpected"])


@bot.message_handler(func=lambda message: True)
def handle_text(message):
    chat_id = message.chat.id; user_name = message.from_user.first_name; text = message.text; current_state = get_user_state(chat_id)
    print(f"User {user_name} ({chat_id}) sent text: '{text}'. Current state: {current_state}")

    if current_state == 'awaiting_ai_question':
        if not gemini_configured:
             bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å AI (Gemini) —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."); clear_user_state(chat_id); keyboard = create_questions_menu_keyboard(); bot.send_message(chat_id, texts["questions_menu"], reply_markup=keyboard); return
        processing_msg = bot.reply_to(message, texts["ask_ai_processing"])
        try:
            model = genai.GenerativeModel('gemini-1.5-flash-latest')
            # --- –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢ –° –£–ö–ê–ó–ê–ù–ò–ï–ú –ù–ê HTML ---
            prompt = f"–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ª–æ–≥–∏—Å—Ç–∏–∫–µ –∏ AI/IoT. –û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n{text}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û HTML-—Ç–µ–≥–∏ (<b>, <i>, <code>) –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown."
            safety_settings=[ # –¢–µ –∂–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                {"category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"}, {"category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},
                {"category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"}, {"category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE"},]
            response = model.generate_content(prompt, safety_settings=safety_settings)

            if response.parts: ai_response = response.text
            else:
                block_reason = response.prompt_feedback.block_reason if response.prompt_feedback else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"
                ai_response = texts["ask_ai_error"] + f"\n(–ü—Ä–∏—á–∏–Ω–∞: –û—Ç–≤–µ—Ç AI –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω [{block_reason}] –∏–ª–∏ –ø—É—Å—Ç)"
                print(f"Gemini blocked/empty (text q): {chat_id}. Reason: {block_reason}. Prompt: '{prompt}'. Resp: {response}")

            # --- –û–¢–ü–†–ê–í–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê –° PARSE_MODE="HTML" –ò –û–ë–†–ê–ë–û–¢–ö–û–ô –û–®–ò–ë–ö–ò ---
            try:
                bot.edit_message_text(chat_id=chat_id, message_id=processing_msg.message_id,
                                      text=ai_response,
                                      reply_markup=create_back_to_questions_keyboard(),
                                      parse_mode="HTML") # <--- –£–°–¢–ê–ù–û–í–õ–ï–ù HTML
            except telebot.apihelper.ApiTelegramException as e:
                 if "can't parse entities" in str(e):
                      print(f"!!! –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML –æ—Ç–≤–µ—Ç–∞ Gemini (text q): {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
                      bot.edit_message_text(chat_id=chat_id, message_id=processing_msg.message_id,
                                            text=ai_response,
                                            reply_markup=create_back_to_questions_keyboard(),
                                            parse_mode=None) # <--- –£–ë–†–ê–õ–ò PARSE_MODE
                 else:
                      print(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {e}")
                      bot.edit_message_text(chat_id=chat_id, message_id=processing_msg.message_id,
                                            text=texts["ask_ai_error"],
                                            reply_markup=create_back_to_questions_keyboard())

        except Exception as e:
            print(f"Google AI (Gemini) API Error (text question): {e}")
            bot.edit_message_text(chat_id=chat_id, message_id=processing_msg.message_id, text=texts["ask_ai_error"], reply_markup=create_back_to_questions_keyboard())
        finally:
            clear_user_state(chat_id)

    elif current_state in ['awaiting_location_1', 'awaiting_location_2']:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '—Å–∫—Ä–µ–ø–∫–∞' -> '–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è'.")
    else:
        pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ polling...")
    while True:
        try: bot.infinity_polling(timeout=10, long_polling_timeout=5)
        except telebot.apihelper.ApiTelegramException as e:
             print(f"–û—à–∏–±–∫–∞ Telegram API –≤ infinity_polling: {e}")
             if "Conflict: terminated by other getUpdates request" in str(e): print("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç 'getUpdates'. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É."); break
             else: print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥..."); time.sleep(15)
        except requests.exceptions.RequestException as e: print(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ (requests) –≤ infinity_polling: {e}"); print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥..."); time.sleep(30)
        except Exception as e: print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è polling: {e}"); print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥..."); time.sleep(15)
        else: print("Infinity polling –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫."); break
    print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
